import java.io.*;
import java.io.IOException;
import java.net.InetAddress;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Admin
 */
public class fileFrame extends javax.swing.JFrame {
    String uid = null;
    /**
     * Creates new form fileFrame
     */
    public fileFrame() {
        super(defaults.uid + "'s FileBox");
        setIconImage(defaults.img.getImage());
        initComponents();
       // setVisible(true);
        refresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        FileList = new javax.swing.JList();
        Download = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        delete = new javax.swing.JButton();

       // setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        FileList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(FileList);

        Download.setText("Download");
        Download.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DownloadMouseClicked(evt);
            }
        });

        refresh.setText("Refresh");
        refresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshMouseClicked(evt);
            }
        });

        delete.setText("Delete");
        delete.setToolTipText("");
        delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(Download)
                .addGap(18, 18, 18)
                .addComponent(refresh)
                .addGap(18, 18, 18)
                .addComponent(delete)
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Download)
                    .addComponent(refresh)
                    .addComponent(delete))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DownloadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DownloadMouseClicked
        // TODO add your handling code here:
        download();
    }//GEN-LAST:event_DownloadMouseClicked

    private void refreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshMouseClicked
        // TODO add your handling code here:
        refresh();
    }//GEN-LAST:event_refreshMouseClicked

    private void deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMouseClicked
        // TODO add your handling code here:
        delete();
    }//GEN-LAST:event_deleteMouseClicked

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Download;
    private javax.swing.JList FileList;
    private javax.swing.JButton delete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refresh;
    // End of variables declaration//GEN-END:variables

    public void download() {
        String sourceDir = "//" + defaults.IP + "/Messenger/Mailbox/" + defaults.uid + "/";
        String destDir = "/Mailbox/";
        File file = new File(destDir);
        file.mkdirs();
        Path source = Paths.get(sourceDir);
        Path dest = Paths.get(destDir);
        List<String> dlList = FileList.getSelectedValuesList();
        for(String s: dlList){
            String FSource = sourceDir + s;
            source = Paths.get(FSource);
            String fileName = (source.getFileName()).toString();
            String FDest = destDir + fileName;
            dest = Paths.get(FDest);
            int fileNumber = 1;
                  while(true){
                  File tempFile = new File(FDest);
                  if(tempFile.exists()){
                      String tempFN = fileName.substring(0, fileName.lastIndexOf("."))
                              + " (" + fileNumber + ")" + 
                              fileName.substring(fileName.lastIndexOf("."),
                              fileName.length());
                      FDest = destDir + tempFN;
                      fileNumber++;
                  }
                  else{
                      break;
                  }
                        }
            try {
                dest = Paths.get(FDest);
                Files.copy(source, dest);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        
        JOptionPane.showMessageDialog(this, "Finished Downloading!\nPlease check C:/Mailbox for your file.");
    }
    
    public void refresh(){
        ArrayList<String> fileList = defaults.SQL.getFileList();
        DefaultListModel<String> listmod = new DefaultListModel();
        for(String s : fileList){
            listmod.addElement(s);
        }
        FileList.setModel(listmod);
        validate();
    }

    public void delete(){
        List<String> dList = FileList.getSelectedValuesList();
        for(String s : dList){
            defaults.output.send(new Message(s, -3, defaults.idx));
        }
        JOptionPane.showMessageDialog(this, "Deleted!  Please refresh.");
        refresh();
    }
    
}
